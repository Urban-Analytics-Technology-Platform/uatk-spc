syntax = "proto3";
package synthpop;

message Population {
    repeated Household households = 1;
    repeated Person people = 2;

    // This is filled out per Activity enum value. The exception is for
    // `Activity::Home`; see `households` for that.
    map<int32, VenueList> venues_per_activity = 3;

    map<string, InfoPerMSOA> info_per_msoa = 4;
}

message Household {
    uint64 id = 1;
    string msoa = 2;
    /// An ID from the original data, kept around for debugging
    int64 orig_hid = 3;
    // These IDs index into `Population::people`
    // TODO These're redundant; worth putting here?
    repeated uint64 members = 4;
}

message VenueList {
    repeated Venue venues = 1;
}

message InfoPerMSOA {
    repeated Point shape = 1;
    uint64 population = 2;
    // All building centroids within this MSOA. Guaranteed to be non-empty.
    repeated Point buildings = 3;
}

// In WGS84
message Point {
    float longitude = 1;
    float latitude = 2;
}

message Person {
    uint64 id = 1;
    uint64 household = 2;
    // This is the centroid of the household's MSOA. It's redundant to store it per person, but
    // very convenient.
    Point location = 3;
    // An ID from the original data, kept around for debugging
    int64 orig_pid = 4;

    Demographics demographics = 5;
    Health health = 6;
    TimeUse time_use = 7;

    repeated Flows flows_per_activity = 8;
}

message Demographics {
    Sex sex = 1;
    uint32 age_years = 2;
    Origin origin = 3;
    NSSEC5 socioeconomic_classification = 4;
    // The Standard Industry Classification for where this person works. 0 means none.
    uint64 sic1d07 = 5;
    // TODO Include soc2010, sic2d07?
}

enum Sex {
    FEMALE = 0;
    MALE = 1;
}

enum Origin {
    WHITE = 0;
    BLACK = 1;
    ASIAN = 2;
    MIXED = 3;
    OTHER = 4;
}

// National Statistics socio-economic classification
enum NSSEC5 {
    // Never worked and long-term unemployed
    UNEMPLOYED = 0;
    // Higher managerial, administrative and professional occupations
    HIGHER = 1;
    // Intermediate occupations
    INTERMEDIATE = 2;
    // Small employers and own account workers
    SMALL = 3;
    // Lower supervisory and technical occupations
    LOWER = 4;
    // Semi-routine and routine occupations
    ROUTINE = 5;
}

message Health {
    BMI bmi = 1;
    bool has_cardiovascular_disease = 2;
    bool has_diabetes = 3;
    bool has_high_blood_pressure = 4;
}

// Body Mass Index
enum BMI {
    // Likely to be missing data
    NOT_APPLICABLE = 0;
    // Underweight: less than 18.5
    UNDERWEIGHT = 1;
    // Normal: 18.5 to less than 25
    NORMAL = 2;
    // Overweight: 25 to less than 30
    OVERWEIGHT = 3;
    // Obese I: 30 to less than 35
    OBESE_1 = 4;
    // Obese II: 35 to less than 40
    OBESE_2 = 5;
    // Obese III: 40 or more
    OBESE_3 = 6;
}

// The proportion of a day spent doing different daily activities.
// unknown + work + school + shop + services + leisure + escort + transport = not_home + home + work_home = home_total + not_home + home_total = 1
message TimeUse {
    double unknown = 1;
    double work = 2;
    double school = 3;
    double shop = 4;
    double services = 5;
    double leisure = 6;
    double escort = 7;
    double transport = 8;
    double not_home = 9;
    double home = 10;
    double work_home = 11;
    double home_total = 12;
}

// Per activity, a list of venues where this person is likely to go do that activity.
message Flows {
    Activity activity = 1;
    repeated Flow flows = 2;
    // These sum to 1 for all `flows_per_activity`, representing a fraction of a day
    double activity_duration = 3;
}

message Flow {
    uint64 venue_id = 1;
    // The probabilities sum to 1 for all `flows`
    double weight = 2;
}

// Represents a place where people do an activity
message Venue {
    // IDs are reused across different activities; both this id and an Activity
    // is needed to lookup from venues_per_activity.
    uint64 id = 1;
    Activity activity = 2;

    Point location = 3;
    // This only exists for PrimarySchool and SecondarySchool. It's a
    // https://en.wikipedia.org/wiki/Unique_Reference_Number. 0 means none.
    uint64 urn = 4;
}

enum Activity {
    RETAIL = 0;
    PRIMARY_SCHOOL = 1;
    SECONDARY_SCHOOL = 2;
    HOME = 3;
    WORK = 4;
    NIGHTCLUB = 5;
}
